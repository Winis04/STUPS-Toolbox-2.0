/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{

    final List<Void> dummy = new ArrayList<Void>();

    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(  Node node)
    {
        // Do nothing
    }

    public void defaultOut(  Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPRoot().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inARoot(ARoot node)
    {
        defaultIn(node);
    }

    public void outARoot(ARoot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARoot(ARoot node)
    {
        inARoot(node);
        if(node.getSymbols() != null)
        {
            node.getSymbols().apply(this);
        }
        {
            List<PRule> copy = new ArrayList<PRule>(node.getRule());
            for(PRule e : copy)
            {
                e.apply(this);
            }
        }
        outARoot(node);
    }

    public void inASymbols(ASymbols node)
    {
        defaultIn(node);
    }

    public void outASymbols(ASymbols node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbols(ASymbols node)
    {
        inASymbols(node);
        {
            List<TSymbol> copy = new ArrayList<TSymbol>(node.getInputletters());
            for(TSymbol e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TSymbol> copy = new ArrayList<TSymbol>(node.getStackletters());
            for(TSymbol e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getStates());
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStartState() != null)
        {
            node.getStartState().apply(this);
        }
        if(node.getBottom() != null)
        {
            node.getBottom().apply(this);
        }
        outASymbols(node);
    }

    public void inARule(ARule node)
    {
        defaultIn(node);
    }

    public void outARule(ARule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARule(ARule node)
    {
        inARule(node);
        if(node.getComingFrom() != null)
        {
            node.getComingFrom().apply(this);
        }
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getStack() != null)
        {
            node.getStack().apply(this);
        }
        {
            List<TSymbol> copy = new ArrayList<TSymbol>(node.getGoingTo());
            for(TSymbol e : copy)
            {
                e.apply(this);
            }
        }
        outARule(node);
    }
}
