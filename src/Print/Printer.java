package Print;

import GrammarSimulator.*;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

/**
 * Created by Isabel on 18.11.2016.
 */
public class Printer {
    /**
     * the print mode
     */
    public static PrintMode printmode=PrintMode.CONSOLE;
    /**
     * the current file that should be used
     */
    public static String currentFile;
    //BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));

    public static int deepnes=0;
    private static BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(System.out));

    public static void print(String s) {
        try {
            writer.write(s);
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    public static void print(Printable printable) {
        printable.print();
    }

    public static void printEnumeration(ArrayList<Printable> printables, String[] point_descriptions, String[] texts, String titel) {
        switch(printmode) {
            case NO:
                break;
            case CONSOLE:
                printEnumerationConsole(printables,point_descriptions,texts,titel);
                break;
            case LATEX:
                printEnumerationLatex(printables,point_descriptions,texts,titel);
                break;
        }
    }



    public static void setWriter(BufferedWriter writer) {
        Printer.writer = writer;
    }

    public static void closeWriter() {
        try {
            Printer.writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static boolean writerIsNull() {
        return writer==null;
    }

    /** LATEX **/
    private static void printEnumerationLatex(ArrayList<Printable> printables, String[] point_descriptions, String[] texts, String titel) {
        if(printables.size()!=texts.length) {
            return;
        }
        try {
            Printer.print("\\section{"+titel+"}\n\n");
            Printer.print("\\begin{description}\n");
            Printer.deepnes++;
            for(int i=0;i<printables.size();i++) {
                writeItem(point_descriptions[i],texts[i]);
                printables.get(i).print();

            }
            Printer.deepnes--;
            Printer.print("\\end{description}\n\n");

        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    public static void printStartOfLatex() {
        Printer.print("%%this document was generated by the STUPS Toolbox 2.0\n");
        Printer.print("\\documentclass{article}\n\\" +
                "usepackage{amssymb}\n\\" +
                "usepackage{amsmath,amsthm}\n\\" +
                "usepackage[ngerman,english]{babel}\n\\" +
                "usepackage{tikz}\n\\" +
                "usetikzlibrary{automata,positioning}\n\n\\" +
                "begin{document}\n\n");
    }
    public static void printEndOfLatex() {
        if(printmode==PrintMode.LATEX) {
            print("\\end{document}");
            try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    public static String makeToGreek(String string) {
        if(string.equals("epsilon")||string.equals("lambda")) {
            return "\\"+string;
        } else {
            return string;
        }
    }


    private static void writeItem(String titel, String subtitel) throws IOException {
        String s="";
        for(int i=0;i<Printer.deepnes;i++) {
            s+="\t";
        }
        if(subtitel.isEmpty()) {
            Printer.print(s+"\\item["+titel+"] \\hfill \\\\ \n"+s+subtitel);
        } else {
            Printer.print(s+"\\item["+titel+"] \\hfill \\\\ \n"+s+subtitel+"\\\\ \n");
        }

    }


    /** CONSOLE **/


    private static void printEnumerationConsole(ArrayList<Printable> printables, String[] point_description, String[] texts, String titel) {
        if(printables.size()!=texts.length) {
            return;
        }

        for(int i=0;i<printables.size();i++) {
            Printer.print(point_description[i]+": "+texts[i]+"\n");

            printables.get(i).print();

        }

    }

    private static void printCYKTableConsole(Matrix matrix) {

    }





}
