/* This file was generated by SableCC (http://www.sablecc.org/). */

package GrammarParser.node;

import java.util.*;
import GrammarParser.analysis.*;

 
public final class ASymbols extends PSymbols
{
    private final LinkedList<TSymbol> _terminals_ = new LinkedList<TSymbol>();
    private final LinkedList<TIdentifier> _nonterminals_ = new LinkedList<TIdentifier>();
    private TIdentifier _startSymbol_;

    public ASymbols()
    {
        // Constructor
    }

    public ASymbols(
          List<TSymbol> _terminals_,
          List<TIdentifier> _nonterminals_,
          TIdentifier _startSymbol_)
    {
        // Constructor
        setTerminals(_terminals_);

        setNonterminals(_nonterminals_);

        setStartSymbol(_startSymbol_);

    }

    @Override
    public Object clone()
    {
        return new ASymbols(
            cloneList(this._terminals_),
            cloneList(this._nonterminals_),
            cloneNode(this._startSymbol_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASymbols(this);
    }

    public LinkedList<TSymbol> getTerminals()
    {
        return this._terminals_;
    }

    public void setTerminals(List<TSymbol> list)
    {
        this._terminals_.clear();
        this._terminals_.addAll(list);
        for(TSymbol e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TIdentifier> getNonterminals()
    {
        return this._nonterminals_;
    }

    public void setNonterminals(List<TIdentifier> list)
    {
        this._nonterminals_.clear();
        this._nonterminals_.addAll(list);
        for(TIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TIdentifier getStartSymbol()
    {
        return this._startSymbol_;
    }

    public void setStartSymbol(TIdentifier node)
    {
        if(this._startSymbol_ != null)
        {
            this._startSymbol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startSymbol_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._terminals_)
            + toString(this._nonterminals_)
            + toString(this._startSymbol_);
    }

    @Override
    void removeChild(  Node child)
    {
        // Remove child
        if(this._terminals_.remove(child))
        {
            return;
        }

        if(this._nonterminals_.remove(child))
        {
            return;
        }

        if(this._startSymbol_ == child)
        {
            this._startSymbol_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(  Node oldChild,   Node newChild)
    {
        // Replace child
        for(ListIterator<TSymbol> i = this._terminals_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSymbol) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TIdentifier> i = this._nonterminals_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._startSymbol_ == oldChild)
        {
            setStartSymbol((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
