/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

 
public final class ARoot extends PRoot
{
    private PSymbols _symbols_;
    private final LinkedList<PRule> _rule_ = new LinkedList<PRule>();

    public ARoot()
    {
        // Constructor
    }

    public ARoot(
          PSymbols _symbols_,
          List<PRule> _rule_)
    {
        // Constructor
        setSymbols(_symbols_);

        setRule(_rule_);

    }

    @Override
    public Object clone()
    {
        return new ARoot(
            cloneNode(this._symbols_),
            cloneList(this._rule_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARoot(this);
    }

    public PSymbols getSymbols()
    {
        return this._symbols_;
    }

    public void setSymbols(PSymbols node)
    {
        if(this._symbols_ != null)
        {
            this._symbols_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._symbols_ = node;
    }

    public LinkedList<PRule> getRule()
    {
        return this._rule_;
    }

    public void setRule(List<PRule> list)
    {
        this._rule_.clear();
        this._rule_.addAll(list);
        for(PRule e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._symbols_)
            + toString(this._rule_);
    }

    @Override
    void removeChild(  Node child)
    {
        // Remove child
        if(this._symbols_ == child)
        {
            this._symbols_ = null;
            return;
        }

        if(this._rule_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(  Node oldChild,   Node newChild)
    {
        // Replace child
        if(this._symbols_ == oldChild)
        {
            setSymbols((PSymbols) newChild);
            return;
        }

        for(ListIterator<PRule> i = this._rule_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PRule) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
