/* This file was generated by SableCC (http://www.sablecc.org/). */

package AutomatonParser.node;

import java.util.*;
import AutomatonParser.analysis.*;

 
public final class AStates extends PStates
{
    private final LinkedList<TIdentifier> _allStates_ = new LinkedList<TIdentifier>();
    private TIdentifier _startState_;
    private final LinkedList<TIdentifier> _endStates_ = new LinkedList<TIdentifier>();

    public AStates()
    {
        // Constructor
    }

    public AStates(
          List<TIdentifier> _allStates_,
          TIdentifier _startState_,
          List<TIdentifier> _endStates_)
    {
        // Constructor
        setAllStates(_allStates_);

        setStartState(_startState_);

        setEndStates(_endStates_);

    }

    @Override
    public Object clone()
    {
        return new AStates(
            cloneList(this._allStates_),
            cloneNode(this._startState_),
            cloneList(this._endStates_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStates(this);
    }

    public LinkedList<TIdentifier> getAllStates()
    {
        return this._allStates_;
    }

    public void setAllStates(List<TIdentifier> list)
    {
        this._allStates_.clear();
        this._allStates_.addAll(list);
        for(TIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TIdentifier getStartState()
    {
        return this._startState_;
    }

    public void setStartState(TIdentifier node)
    {
        if(this._startState_ != null)
        {
            this._startState_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startState_ = node;
    }

    public LinkedList<TIdentifier> getEndStates()
    {
        return this._endStates_;
    }

    public void setEndStates(List<TIdentifier> list)
    {
        this._endStates_.clear();
        this._endStates_.addAll(list);
        for(TIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._allStates_)
            + toString(this._startState_)
            + toString(this._endStates_);
    }

    @Override
    void removeChild(  Node child)
    {
        // Remove child
        if(this._allStates_.remove(child))
        {
            return;
        }

        if(this._startState_ == child)
        {
            this._startState_ = null;
            return;
        }

        if(this._endStates_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(  Node oldChild,   Node newChild)
    {
        // Replace child
        for(ListIterator<TIdentifier> i = this._allStates_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._startState_ == oldChild)
        {
            setStartState((TIdentifier) newChild);
            return;
        }

        for(ListIterator<TIdentifier> i = this._endStates_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
