/* This file was generated by SableCC (http://www.sablecc.org/). */

package AutomatonParser.node;

import java.util.*;
import AutomatonParser.analysis.*;

 
public final class ARule extends PRule
{
    private TIdentifier _comingFrom_;
    private final LinkedList<TListArg> _listArg_ = new LinkedList<TListArg>();
    private TIdentifier _goingTo_;

    public ARule()
    {
        // Constructor
    }

    public ARule(
          TIdentifier _comingFrom_,
          List<TListArg> _listArg_,
          TIdentifier _goingTo_)
    {
        // Constructor
        setComingFrom(_comingFrom_);

        setListArg(_listArg_);

        setGoingTo(_goingTo_);

    }

    @Override
    public Object clone()
    {
        return new ARule(
            cloneNode(this._comingFrom_),
            cloneList(this._listArg_),
            cloneNode(this._goingTo_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARule(this);
    }

    public TIdentifier getComingFrom()
    {
        return this._comingFrom_;
    }

    public void setComingFrom(TIdentifier node)
    {
        if(this._comingFrom_ != null)
        {
            this._comingFrom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comingFrom_ = node;
    }

    public LinkedList<TListArg> getListArg()
    {
        return this._listArg_;
    }

    public void setListArg(List<TListArg> list)
    {
        this._listArg_.clear();
        this._listArg_.addAll(list);
        for(TListArg e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TIdentifier getGoingTo()
    {
        return this._goingTo_;
    }

    public void setGoingTo(TIdentifier node)
    {
        if(this._goingTo_ != null)
        {
            this._goingTo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._goingTo_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comingFrom_)
            + toString(this._listArg_)
            + toString(this._goingTo_);
    }

    @Override
    void removeChild(  Node child)
    {
        // Remove child
        if(this._comingFrom_ == child)
        {
            this._comingFrom_ = null;
            return;
        }

        if(this._listArg_.remove(child))
        {
            return;
        }

        if(this._goingTo_ == child)
        {
            this._goingTo_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(  Node oldChild,   Node newChild)
    {
        // Replace child
        if(this._comingFrom_ == oldChild)
        {
            setComingFrom((TIdentifier) newChild);
            return;
        }

        for(ListIterator<TListArg> i = this._listArg_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TListArg) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._goingTo_ == oldChild)
        {
            setGoingTo((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
